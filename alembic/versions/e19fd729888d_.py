"""empty message

Revision ID: e19fd729888d
Revises: cbfec58e6ca8
Create Date: 2017-11-23 05:39:54.880014

"""

# revision identifiers, used by Alembic.
revision = 'e19fd729888d'
down_revision = 'cbfec58e6ca8'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa


# Patch in knowledge of the citext type, so it reflects properly.
from sqlalchemy.dialects.postgresql.base import ischema_names
import citext
import queue
import datetime
from sqlalchemy.dialects.postgresql import ENUM
from sqlalchemy.dialects.postgresql import JSON
from sqlalchemy.dialects.postgresql import TSVECTOR
ischema_names['citext'] = citext.CIText

from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    print("Adding state column")
    op.add_column('db_releases', sa.Column('state', postgresql.ENUM('new', 'fetching', 'processing', 'complete', 'error', 'removed', 'disabled', name='dlstate_enum'), nullable=True))
    print("Adding text column")
    op.add_column('db_releases', sa.Column('err_str', sa.Text()))


    # -4
    # -3
    # -5
    # -1
    # -9
    #  2
    #  0


    conn = op.get_bind()

    print("Updating for row: -4")
    conn.execute('''
        UPDATE
            db_releases
        SET
            state = 'error'
        WHERE
            dlstate = -4;
        ''')


    print("Updating for row: -3")
    conn.execute('''
        UPDATE
            db_releases
        SET
            state = 'error'
        WHERE
            dlstate = -3;
        ''')


    print("Updating for row: -5")
    conn.execute('''
        UPDATE
            db_releases
        SET
            state = 'error'
        WHERE
            dlstate = -5;
        ''')


    print("Updating for row: -1")
    conn.execute('''
        UPDATE
            db_releases
        SET
            state = 'error'
        WHERE
            dlstate = -1;
        ''')


    print("Updating for row: -9")
    conn.execute('''
        UPDATE
            db_releases
        SET
            state = 'error'
        WHERE
            dlstate = -9;
        ''')



    print("Updating for row:  0")
    conn.execute('''
        UPDATE
            db_releases
        SET
            state = 'new'
        WHERE
            dlstate = 0;
        ''')


    print("Updating for row:  2")
    conn.execute('''
        UPDATE
            db_releases
        SET
            state = 'complete'
        WHERE
            dlstate = 2;
        ''')


    print("Checking there are no nulls")

    res = conn.execute('''
        SELECT
            COUNT(*)
        FROM
            db_releases
        WHERE
            state IS NULL;
        ''')
    nulls = res.fetchall()

    assert nulls == [(0,)]
    print("Should be zero:", nulls)


    op.alter_column('db_releases', 'state', nullable=False)

    op.create_index(op.f('ix_db_releases_state'), 'db_releases', ['state'], unique=False)
    op.drop_index('ix_db_releases_dlstate', table_name='db_releases')
    op.drop_column('db_releases', 'dlstate')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('db_releases', sa.Column('dlstate', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_index('ix_db_releases_dlstate', 'db_releases', ['dlstate'], unique=False)
    op.drop_index(op.f('ix_db_releases_state'), table_name='db_releases')
    op.drop_column('db_releases', 'state')
    # ### end Alembic commands ###
